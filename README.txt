# Simple SpellChecker Program README
---
**Course:** MCIT 591, Assignment 4
**Author:** Sai Merriam

## Project Description

#### This program consists of a simple spell checker that does the following: 
1. Identifies misspelled words in a file by checking each word in the file against a provided dictionary. 
2. Provides the user with a list of alternative words that can replace the misspelled word. Users can elect to replace the word, accept the original spelling, or manually type a word. 
3. Writes a new file with corrected words as selected by the user. 

---
## Notes and Limitations in Scope

* This program does not maintain the punctuation of the original document in the new file generated by this program.
* Any words with capital letters that are not acronyms (i.e. "MCIT") will be marked as incorrect. All acronyms are considered correct. 
* Due to the methods outlined in assignment specifications, this spellchecker may struggle to identify the desired alternative words for short words and words comprised of very common characters 
  * i.e. an incorrect word "cit" is a likely misspelling for a great number of words: "it", "fit", "bit", "lit", "sit", "wit", "zit", "cat", "cot", "cut", "cite", etc.

---
## Included Classes
### 1. FileToCheck
* This class creates a file to spell check. 
#### Constructor: 
* Reads in a file and saves the words to an ArrayList to be used for spell checking. 

#### Methods: 
* *checkForAllCaps():*  Given a string word, checks to see if the string is all capital letters. Returns Boolean.
* *getFileToCheck():*  Returns the file to spell check as an ArrayList.

### 2. WordDictionary
#### Constructor: 
* Reads the provided English dictionary file to an ArrayList to be used for spell checking.

#### Methods: 
* *scanDictionary():*  Given a string word, goes through the dictionary ArrayList to find a match. Returns boolean.
* *getEngDictionary():*  Returns the dictionary ArrayList.
* *isMatchFound():*  Returns whether a match was found when using *scanDictionary()*.

### 3. WordRecommender: 
#### Constructor: 
* Constructs a WordRecommender with a fileName parameter.

#### Methods: 
* *getWordsWithCommonLetters():* Given a word and a list of words from a dictionary, return the a narrowed down list of words from the dictionary that have at least n letters in common. Only distinct letters are considered. n is determined in the *getWordSuggestions()* method as based on the length of the word (less matches needed for longer words to account for the fact that longer words tend to have more repeat letters).  
* *getSimularityMetric():* Given two words, this method computes two measures of similarity (the number of matching characters going from left to right, and right to left) and returns the average. 
* *getWordSuggestions():* This method takes an incorrect word, a specified range of candidate word lengths, a specified minimum threshold for how common two words are (commonPercent), and calculates/returns an ArrayList of the top n words most similar to the incorrect word. This method achieves this by using the three aformentioned methods in the class.  
* *getTopWords():* Returns an ArrayList of the top words genertated by the *getWordSuggestions()* method.
* *prettyPrint():* Takes an ArrayList of words and constructs a string that shows a numbered list when printed. 

### 4. SpellChecker:
#### Constructor:
* Constructs a spell checker.

#### Methods:
* *spellCheck():* Performs the functions of the SpellChecker program by calling constuctors and methods from other classes and obtaining user input. Once the user inputs the name of file to be spell checked, this method checks each entry in the file. It provides word suggestions for incorrect words with options for actions (i.e. replace, accept as is, and manually type word) and obtains feedback from the user on what to do. The method compiles an ArrayList of spell checked words, and finally writes the list to a new file with extension filename_chk.txt.

### 5. SpellCheckerRunner:
* Contains a main method that constructs a SpellChecker and runs the *spellcheck()* method.
---
## Design Feedback
*Assuming that this feedback is meant to assess the WordRecommender Class exactly as it was outlined in the specifications, that is without making additional methods (aside from getters)*
* **Breaking down methods even further:** Some portions of these methods were more repetitive than necessary, and could be broken down even further. For example, *getWordsWithCommonLetters()* and *getWordSuggestions()* both require calculating the number of unique characters in words, so it would have been better to have a distinct method for this function. Additionally, the *getWordSuggestions()* method was long and rather cumbersome to write, and I think its design could be improved by subdividing some of the functions, such as calculating commonPercent and sorting to get topN words, into further methods. I also found that it was easier to run into errors when making amendments to the same ArrayList over and over, so I ended up creating new ArrayLists when narrowing down the list of candidate words. Subdividing the functions into more methods that pass around and modify a single ArrayList would be better, simply using the *getWordSuggestions()* method to compile and perform the various methods in the right order. 
* **Better names for parameters:** In the WordRecommender class, the parameters names are vague. It would be better practice to have names that are more specific to what they represent, and don't duplicate themselves (like int n does).   
* **WordRecommender constructor**: No fileName parameter is actually needed for the WordRecommender class, particularly since for this assignment we were encouraged to have at least three classes. It would be a logical choice to have the file handling done by another class, which would take the fileName and create an ArrayList with words to spell check. 
* **Word Length Dependent Parameters:** I found that including logic to change parameter values depending on the length of a given incorrect word helped increase accuracy. For example, if there are only four letters in the word, having a commonPercent value of .8 would result is no results, whereas .5 would. For a longer word, .5 woudn't filter out enough unsuitable matches, so a higher commonPercent value like .8 would be appropriate. 
* **Suggestion Accuracy:** In terms of getting the most similar word suggestions, this spell checker is limited in a few ways. For words that are short, are filled with common characters or have many repetitive characters, *getWordsWithCommonLetters()* returns a very large number of words, resulting in   *getSimularityMetric()* returning many words with the same simularity score. A more sophisticated version of this program could include a way to break ties, such as favoring suggestions that are more likely because they contain letters that are closer together on the keyboard and thus more likely to be pressed in a typo. 